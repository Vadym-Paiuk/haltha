/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  mobMenuToggle();
  toggleJoinItems();
  stickyHeader();
  valuesSlider();
  teamSlider();
  toggleFaqItems('.faqs__item-question');
  toggleFaqItems('.faq__item-question');
  toggleFaqCategories('.faq__category', '.faq__item');
  formValidation();
  loginForm();
  lostPasswordForm();
  resetPasswordForm();
  registrationForm();
  deleteAccount();
  switchFormSteps();
  toggleContent('.account-content', '.account-content__edit-btn');
  toggleContent('.account-content', '.account-content__close-btn');
  toggleContent('.account-sidebar', '.account-sidebar-toggle');
  var wow = new WOW({
    boxClass: 'wow',
    animateClass: 'animated',
    offset: 0,
    mobile: true,
    live: true
  }).init();
  smoothScroll();
  telInputFlag();
  checkScrolledConsent(unlockConsentFields);
  editHealthInformationForm();
  Fancybox.bind('[data-fancybox]');
});
function toggleJoinItems() {
  var itemsLinks = document.querySelectorAll('.join__item-btn');
  var activeItem = document.querySelector('.join__item.active');
  if (!itemsLinks.length) return;
  for (var i = 0; i < itemsLinks.length; i++) {
    itemsLinks[i].addEventListener('click', function (e) {
      e.preventDefault();
      if (e.currentTarget.parentElement === activeItem) {
        location.href = e.currentTarget.href;
      } else {
        activeItem.classList.remove('active');
        activeItem = e.currentTarget.parentElement;
        activeItem.classList.add('active');
      }
    });
  }
}
function toggleFaqItems(faqItemsQuestion) {
  var questions = document.querySelectorAll(faqItemsQuestion);
  if (!questions.length) return;
  var activeQuestion = false;
  for (var i = 0; i < questions.length; i++) {
    questions[i].addEventListener('click', function (e) {
      if (activeQuestion) {
        activeQuestion.classList.remove('active');
      }
      if (activeQuestion == e.currentTarget.parentElement) {
        activeQuestion = false;
        return;
      }
      activeQuestion = e.currentTarget.parentElement;
      activeQuestion.classList.add('active');
    });
  }
}
function autoScrollFaqCategories(activeElement) {
  if (document.documentElement.clientWidth > 991) {
    return;
  }
  var menu = document.querySelector(".faq__categories-inner");
  var menuWrapper = document.querySelector(".faq__categories");
  var menuWidth = menu.getBoundingClientRect().width;
  var menuOffsetLeft = menu.getBoundingClientRect().left;
  var menuWrapperOffsetLeft = menuWrapper.getBoundingClientRect().left;
  var nextActiveElement = activeElement.nextElementSibling;
  var previousActiveElement = activeElement.previousElementSibling;
  if (nextActiveElement) {
    var nextActiveElementOffsetRight = nextActiveElement.getBoundingClientRect().right - menuOffsetLeft;
    if (nextActiveElementOffsetRight > menuWidth) {
      var menuOffset = menuWidth - nextActiveElementOffsetRight;
      menu.style.transform = "translateX(".concat(menuOffset, "px)");
    }
  }
  if (previousActiveElement) {
    var previousActiveElementOffsetLeft = previousActiveElement.getBoundingClientRect().left - menuOffsetLeft;
    if (previousActiveElementOffsetLeft - menuWrapperOffsetLeft < 0) {
      var _menuOffset = Math.min(-previousActiveElementOffsetLeft, 0);
      menu.style.transform = "translateX(".concat(_menuOffset, "px)");
    }
  }
}
function toggleFaqCategories(faqCategories, faqItems) {
  var categories = document.querySelectorAll(faqCategories);
  if (!categories.length) return;
  var items = document.querySelectorAll(faqItems);
  var activeCategory = categories[0];
  activeCategory.classList.add('active');
  for (var k = 0; k < categories.length; k++) {
    categories[k].addEventListener('click', function (e) {
      if (activeCategory) {
        activeCategory.classList.remove('active');
      }
      activeCategory = e.currentTarget;
      activeCategory.classList.add('active');
      filterItems(items, activeCategory);
      autoScrollFaqCategories(activeCategory);
    });
  }
  function filterItems(filteringItems, flteringActiveCategory) {
    for (var c = 0; c < filteringItems.length; c++) {
      if (flteringActiveCategory.dataset.category === filteringItems[c].dataset.category) {
        filteringItems[c].style.display = '';
      } else if (flteringActiveCategory.dataset.category === 'all') {
        filteringItems[c].style.display = '';
      } else {
        filteringItems[c].style.display = 'none';
      }
    }
  }
}
function mobMenuToggle() {
  var btn = document.querySelector('.header__navigation-btn-menu');
  var menu = document.querySelector('.header__navigation');
  var header = document.querySelector('.header');
  if (!menu) return;
  btn.addEventListener('click', function (e) {
    btn.classList.toggle('active');
    menu.classList.toggle('active');
    header.classList.toggle('active');
  });
}
function stickyHeader() {
  var header = document.querySelector('.header');
  if (!header) return;
  if (document.body.getBoundingClientRect().top < 0) {
    header.classList.add('sticky');
  } else {
    header.classList.remove('sticky');
  }
  document.addEventListener('scroll', function () {
    if (document.body.getBoundingClientRect().top < 0) {
      header.classList.add('sticky');
    } else {
      header.classList.remove('sticky');
    }
  });
}
function valuesSlider() {
  var swiper = new Swiper(".values-slider", {
    slidesPerView: 1,
    spaceBetween: 40,
    navigation: {
      nextEl: ".values-button-next",
      prevEl: ".values-button-prev"
    },
    pagination: {
      el: ".values-pagination",
      clickable: true,
      dynamicBullets: true,
      dynamicMainBullets: 1,
      renderBullet: function renderBullet(index, className) {
        var preValue = '';
        if (index < 9) {
          preValue = '0';
        } else {
          preValue = '';
        }
        return '<div class="' + className + '">' + preValue + (index + 1) + "</div>";
      }
    }
  });
}
function teamSlider() {
  var swiper = new Swiper(".team-slider", {
    slidesPerView: 1,
    spaceBetween: 32,
    navigation: {
      nextEl: ".team-button-next",
      prevEl: ".team-button-prev"
    }
  });
}
function switchFormSteps() {
  var formSteps = document.querySelectorAll('.form__step');
  if (!formSteps.length) return;
  var activeFormStep = document.querySelector('.form__step.active');
  if (activeFormStep !== null) {
    changeProgressbar(+activeFormStep.dataset.step);
  }
  var _loop = function _loop(i) {
    var btnNextStep = formSteps[i].querySelector('.btn-next'),
      btnPrevStep = formSteps[i].querySelector('.btn-prev');
    if (btnNextStep && btnNextStep.type === 'button') {
      btnNextStep.addEventListener('click', function () {
        var formStepInputs = formSteps[i].querySelectorAll('input[required]');
        for (var k = 0; k < formStepInputs.length; k++) {
          validateInput(formStepInputs[k]);
        }
        checkFormStepError(formSteps[i], nextFormStep);
      });
    }
    if (btnPrevStep && btnPrevStep.type === 'button') {
      btnPrevStep.addEventListener('click', prevFormStep);
    }
  };
  for (var i = 0; i < formSteps.length; i++) {
    _loop(i);
  }
}
function checkFormStepError(currentFormStep, nextFormStepCallback) {
  var hasErrors = currentFormStep.querySelector('.error');
  if (!hasErrors) {
    nextFormStepCallback();
  }
}
function nextFormStep() {
  var activeFormStep = document.querySelector('.form__step.active');
  if (activeFormStep.classList.contains('form__step-otp-phonenumber')) {
    send_verification_code();
  }
  if (activeFormStep.classList.contains('check-email-exist')) {
    check_email_exists(activeFormStep);
    return;
  }
  activeFormStep.classList.remove('active');
  activeFormStep.nextElementSibling.classList.add('active');
  changeProgressbar(+activeFormStep.nextElementSibling.dataset.step);
}
function prevFormStep() {
  var activeFormStep = document.querySelector('.form__step.active');
  activeFormStep.classList.remove('active');
  activeFormStep.previousElementSibling.classList.add('active');
  changeProgressbar(activeFormStep.previousElementSibling.dataset.step);
}
function changeProgressbar(currentStep) {
  var bars = document.querySelectorAll('.form__progress');
  if (bars.length === 0) {
    return;
  }
  setTimeout(function () {
    bars[currentStep - 1].children[0].style.width = "".concat((currentStep - 1) / bars.length * 100, "%");
  }, 100);
}
function formValidation(callbackSubmitFunc) {
  var form = document.querySelector('.js-form-validation');
  if (!form) return;
  form.addEventListener('keyup', function (e) {
    validateInput(e.target);
  });
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    var formInputs = e.currentTarget.querySelectorAll('input[required]');
    for (var k = 0; k < formInputs.length; k++) {
      validateInput(formInputs[k]);
    }
    checkFormStepError(e.target, function () {
      e.target.submit();
      console.log('form success submit');
    });
  });
}
function validateInput(input) {
  var regexPatterns = {
    firstname: /^[а-яА-Яa-zA-Z\s]+$/,
    lastname: /^[а-яА-Яa-zA-Z\s]+$/,
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    state: /^[а-яА-Яa-zA-Z\s]+$/,
    city: /^[а-яА-Яa-zA-Z\s]+$/,
    phonenumber: /^\+?[0-9]+$/,
    zipcode: /^[0-9]{5}$/,
    birthday: /^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$/,
    todaydate: /^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/,
    password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d\W_]{8,}$/
  };
  var currentInput = input.form[input.name];
  if (!input.hasAttribute('required')) {
    setInputValidationResult(currentInput, true);
    return;
  }
  var validateResult = false;
  if (currentInput.length) {
    validateResult = _toConsumableArray(currentInput).find(function (checkbox) {
      return checkbox.checked;
    });
  } else if (currentInput.type === "checkbox" || currentInput.type === "radio") {
    validateResult = currentInput.checked;
  } else if (currentInput.type === "date") {
    validateResult = regexPatterns[currentInput.name];
    if (validateResult && currentInput.name === 'birthday') {
      validateResult = underAgeValidate(currentInput.value);
    }
  } else if (currentInput.name === "consent_firstname") {
    var login_firstname = document.querySelector('[name=firstname]');
    validateResult = currentInput.value === login_firstname.value;
  } else if (currentInput.name === "consent_lastname") {
    var _login_firstname = document.querySelector('[name=lastname]');
    validateResult = currentInput.value === _login_firstname.value;
  } else if (currentInput.name === "otp_phonenumber") {
    var phone = $('[name=otp_phonenumber]');
    validateResult = phone.intlTelInput('isValidNumber');
  } else if (regexPatterns[currentInput.name]) {
    validateResult = regexPatterns[currentInput.name].test(currentInput.value);
  } else {
    validateResult = !!currentInput.value.length;
  }
  setInputValidationResult(currentInput, validateResult);
  unlockConsentAgree(currentInput, validateResult);
  return validateResult;
}
function underAgeValidate(birthday) {
  var optimizedBirthday = birthday.replace(/-/g, "/");
  var Birthday = new Date(optimizedBirthday);
  var Age = ~~((Date.now() - Birthday) / 31557600000);
  return Age >= 18;
}
function setInputValidationResult(input, result) {
  if (result) {
    if (input.length) {
      input[0].parentElement.parentElement.classList.remove('error');
    } else if (input.type === "checkbox" || input.type === "radio") {
      input.parentElement.parentElement.classList.remove('error');
    } else {
      input.classList.remove('error');
    }
  } else {
    if (input.length) {
      input[0].parentElement.parentElement.classList.add('error');
    } else if (input.type === "checkbox" || input.type === "radio") {
      input.parentElement.parentElement.classList.add('error');
    } else {
      input.classList.add('error');
    }
  }
}
function toggleContent(block, target) {
  var container = document.querySelector(block);
  var btn = document.querySelector(target);
  if (!container || !btn) return;
  btn.addEventListener('click', function (e) {
    e.currentTarget.classList.toggle('active');
    container.classList.toggle('active');
  });
}
function smoothScroll() {
  var linkNav = document.querySelectorAll('[href^="#"]');
  var header = document.querySelector('.header');
  if (!header) return;
  var headerHeight = header.getBoundingClientRect().height;
  var V = 0.2;
  for (var i = 0; i < linkNav.length; i++) {
    linkNav[i].addEventListener('click', function (e) {
      //по клику на ссылку
      e.preventDefault(); //отменяем стандартное поведение
      var w = window.pageYOffset; // производим прокрутка прокрутка
      var hash = this.href.replace(/[^#]*(.*)/, '$1');
      var tar = document.querySelector(hash); // к id элемента, к которому нужно перейти
      var t = tar.getBoundingClientRect().top - headerHeight;
      var start = null;
      requestAnimationFrame(step); // подробнее про функцию анимации [developer.mozilla.org]
      function step(time) {
        if (start === null) {
          start = time;
        }
        var progress = time - start,
          r = t < 0 ? Math.max(w - progress / V, w + t) : Math.min(w + progress / V, w + t);
        window.scrollTo(0, r);
        if (r != w + t) {
          requestAnimationFrame(step);
        } else {
          location.hash = hash; // URL с хэшем
        }
      }

      if (t > 1 || t < -1) {
        requestAnimationFrame(step);
      }
    });
  }
}
var $ = jQuery.noConflict();
$(document).on('change', '#agree-privacy', function (e) {
  e.preventDefault();
  var form = $(this).parents('form'),
    submit = form.find('button');
  if ($(this).is(':checked')) {
    submit.attr('disabled', false);
  } else {
    submit.attr('disabled', true);
  }
});
function loginForm() {
  var form = document.querySelector('.js-form-authorization');
  if (!form) return;
  form.addEventListener('keyup', function (e) {
    validateInput(e.target);
  });
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    var formInputs = e.currentTarget.querySelectorAll('input[required]');
    for (var k = 0; k < formInputs.length; k++) {
      validateInput(formInputs[k]);
    }
    checkFormStepError(e.target, submitLoginForm);
  });
}
function submitLoginForm() {
  var form = $('.js-form-authorization');
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        window.location.href = response.data;
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
}
function lostPasswordForm() {
  var form = document.querySelector('.js-form-lost-password');
  if (!form) return;
  form.addEventListener('keyup', function (e) {
    validateInput(e.target);
  });
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    var formInputs = e.currentTarget.querySelectorAll('input[required]');
    for (var k = 0; k < formInputs.length; k++) {
      validateInput(formInputs[k]);
    }
    checkFormStepError(e.target, submitLostPasswordForm);
  });
}
function submitLostPasswordForm() {
  var form = $('.js-form-lost-password');
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        noticeMessage(response.data);
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
}
function resetPasswordForm() {
  var form = document.querySelector('.js-form-reset-password');
  if (!form) return;
  form.addEventListener('keyup', function (e) {
    validateInput(e.target);
  });
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    var formInputs = e.currentTarget.querySelectorAll('input[required]');
    for (var k = 0; k < formInputs.length; k++) {
      validateInput(formInputs[k]);
    }
    checkFormStepError(e.target, submitResetPasswordForm);
  });
}
function submitResetPasswordForm() {
  var form = $('.js-form-reset-password');
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        window.location.href = response.data;
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
}
function registrationForm() {
  var form = document.querySelector('.js-form-registration');
  if (!form) return;
  form.addEventListener('keyup', function (e) {
    validateInput(e.target);
    if (e.target.name === 'zipcode' && validateInput(e.target)) {
      getStateCity(e.target.value, setStateCity);
    }
  });
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    var formInputs = e.currentTarget.querySelectorAll('input[required]');
    for (var k = 0; k < formInputs.length; k++) {
      validateInput(formInputs[k]);
    }
    checkFormStepError(e.target, submitRegistrationForm);
  });
}
function submitRegistrationForm() {
  var form = $('.js-form-registration');
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        window.location.href = response.data;
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
}
function deleteAccount() {
  var form = document.querySelector('.js-delete-account'),
    $form = $('.js-delete-account');
  if (!form) return;
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    $.ajax({
      type: 'POST',
      url: '/wp-admin/admin-ajax.php',
      data: $form.serializeArray(),
      success: function success(response) {
        if (response.success === true) {
          window.location.href = response.data;
        } else {
          errorMessage(response.data);
        }
      },
      error: function error() {
        console.log('Error');
      }
    });
  });
}
function telInputFlag() {
  var telInputs = $('.input-tel');
  telInputs.each(function (index) {
    $(this).intlTelInput({
      utilsScript: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.19/js/utils.js',
      initialCountry: 'auto',
      geoIpLookup: function geoIpLookup(callback) {
        fetch("https://ipapi.co/json").then(function (res) {
          return res.json();
        }).then(function (data) {
          callback(data.country_code);
        })["catch"](function () {
          callback("us");
        });
      },
      preferredCountries: ['us', 'ca', 'gb'],
      separateDialCode: true,
      autoPlaceholder: 'off'
    });
    $(this).on('input', function () {
      var input = $(this),
        name = input.attr('name'),
        name_hidden = name + '_hidden',
        value = input.val(),
        dialCode = input.intlTelInput('getSelectedCountryData').dialCode;
      value = value.replace('+' + dialCode, '');
      input.val(value);
      if ($('input[name=' + name_hidden + ']').length === 0) {
        return;
      }
      $('input[name=' + name_hidden + ']').val(input.intlTelInput('getNumber'));
    });
  });
}
function send_verification_code() {
  var data = {
    action: 'send_verification_code',
    otp_phonenumber: $('input[name=otp_phonenumber]').intlTelInput('getNumber')
  };
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: data,
    success: function success(response) {
      if (response.success === true) {
        //console.log(response.data)
      } else {
        console.log(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
}
function check_email_exists(activeFormStep) {
  var data = {
    action: 'check_email_exists',
    email: $('input[name=email]').val()
  };
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: data,
    success: function success(response) {
      if (response.success === true) {
        activeFormStep.classList.remove('active');
        activeFormStep.nextElementSibling.classList.add('active');
        changeProgressbar(+activeFormStep.nextElementSibling.dataset.step);
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
}
$(document).on('click', '.select', function (e) {
  e.preventDefault();
  if ($(e.target).hasClass('option')) return;
  $(this).toggleClass('open');
});
$(document).on('click', function (e) {
  var clickedElement = e.target;
  if ($(clickedElement).closest('.hint').length === 0) {
    if ($(e.target).hasClass('option')) return;
    $('.hint').removeClass('open');
  }
});
$(document).on('click', '.option', function (e) {
  e.preventDefault();
  var option = $(this),
    select = option.parents('.select, .hint'),
    input = select.find('.selected input'),
    title = select.find('span');
  $('.option').removeClass('current');
  option.toggleClass('current');
  if (option.data('option')) {
    if (input) {
      input.val(option.data('option'));
    }
    if (title && !title.hasClass('error-message')) {
      title.text($(this).text());
    }
  }
  select.toggleClass('open');
  if ($('.js-reload-posts').length) {
    $('.js-reload-posts').submit();
  }
});
$(document).on('submit', '.js-reload-posts', function (e) {
  e.preventDefault();
  var form = $(this);
  showLoader(form);
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        form.html(response.data);
      } else {
        console.log(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
  $([document.documentElement, document.body]).animate({
    scrollTop: form.offset().top - 100
  }, 1000);
});
$(document).on('click', '.pagination-link', function (e) {
  e.preventDefault();
  $('[name=page]').val($(this).data('page'));
  $('[name=pagination]').val('true');
  $('.js-reload-posts').submit();
});
$(document).on('submit', '.js-form-subscribe', function (e) {
  e.preventDefault();
  var form = $(this);
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        noticeMessage(response.data);
        form[0].reset();
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
});
function showLoader(element) {
  element.prepend('<div class="loader-overlay"><div class="loader-cv-spinner"><span class="loader-spinner"></span></div></div>');
}
function noticeMessage(message) {
  $.growl({
    title: "",
    message: message,
    style: "notice"
  });
}
function errorMessage(message) {
  $.growl({
    title: "",
    message: message,
    style: "error",
    duration: 10000
  });
}
function getStateCity(zip, cb) {
  var url = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + zip + '&sensor=true&key=' + args_object.geocoding_api_key;
  var stateCity = {};
  fetch(url).then(function (response) {
    return response.json();
  }).then(function (data) {
    var address_components = data.results[0].address_components;
    for (var i = 0; i < address_components.length; i++) {
      var types = address_components[i].types;
      for (var j = 0; j < types.length; j++) {
        if (types[j] === 'administrative_area_level_1') {
          stateCity.state = address_components[i].long_name;
        }
        if (types[j] === 'locality') {
          stateCity.city = address_components[i].long_name;
        }
      }
    }
    cb(stateCity);
  });
}
function setStateCity(data) {
  var state = document.querySelectorAll('[name=state]'),
    city = document.querySelectorAll('[name=city]');
  for (var i = 0; i < state.length; i++) {
    state[i].value = data['state'];
  }
  for (var _i = 0; _i < city.length; _i++) {
    city[_i].value = data['city'];
  }
}
function checkScrolledConsent(callback) {
  var consent = document.querySelector('.informed__consent');
  if (!consent) return;
  consent.addEventListener('scroll', function () {
    var currentScrollTop = consent.scrollTop,
      maxScrollHeight = consent.scrollHeight - consent.clientHeight;
    if (currentScrollTop === maxScrollHeight) {
      callback();
    }
  });
}
$(document).on('input', '[name=has-condition]', function (e) {
  var input = $(this),
    select = $('.select-condition'),
    $select_input = select.find('input'),
    select_input = document.querySelector('.select-condition input');
  $select_input.prop('required', input.val() === 'on');
  if (input.val() === 'on') {
    select.removeClass('hide');
  } else {
    select.addClass('hide');
    $select_input.removeClass('error');
  }
});
$(document).on('input', '[name=has-medicine], [name=has-drugs]', function (e) {
  var input = $(this),
    select = $('.select-medicine'),
    $select_input = select.find('input'),
    select_input = document.querySelector('.select-medicine input');
  $select_input.prop('required', input.val() === 'on');
  if (input.val() === 'on') {
    select.removeClass('hide');
  } else {
    select.addClass('hide');
    $select_input.removeClass('error');
  }
});
$(document).on('input', '.drugs-search-input', function (e) {
  var input = $(this);
  if (input.val().length < 3) {
    return;
  }
  searchDrugs(input.val()).then(updateDrugsHint);
});
function searchDrugs(_x) {
  return _searchDrugs.apply(this, arguments);
}
function _searchDrugs() {
  _searchDrugs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(q) {
    var data, url, response;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          data = {
            'action': 'search_drugs',
            'q': q
          }, url = '/wp-admin/admin-ajax.php';
          _context.next = 3;
          return fetch(url, {
            method: "POST",
            // *GET, POST, PUT, DELETE, etc.
            mode: "cors",
            // no-cors, *cors, same-origin
            cache: "no-cache",
            // *default, no-cache, reload, force-cache, only-if-cached
            credentials: "same-origin",
            // include, *same-origin, omit
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            redirect: "follow",
            // manual, *follow, error
            referrerPolicy: "no-referrer",
            // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
            body: new URLSearchParams(data).toString() // body data type must match "Content-Type" header
          });
        case 3:
          response = _context.sent;
          return _context.abrupt("return", response.json());
        case 5:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _searchDrugs.apply(this, arguments);
}
function updateDrugsHint(drugs) {
  var select = $('.select-medicine'),
    options = $('.select-medicine .form-options');
  drugs = drugs.data;
  $('.select-medicine .option:not(:last)').remove();
  options.prepend(drugs);
  select.addClass('open');
}
$(document).on('input', '.conditions-search-input', function (e) {
  var input = $(this);
  if (input.val().length < 3) {
    return;
  }
  searchConditions(input.val()).then(updateConditionsHint);
});
function searchConditions(_x2) {
  return _searchConditions.apply(this, arguments);
}
function _searchConditions() {
  _searchConditions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(q) {
    var data, url, response;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          data = {
            'action': 'search_diseases',
            'q': q
          }, url = '/wp-admin/admin-ajax.php';
          _context2.next = 3;
          return fetch(url, {
            method: "POST",
            // *GET, POST, PUT, DELETE, etc.
            mode: "cors",
            // no-cors, *cors, same-origin
            cache: "no-cache",
            // *default, no-cache, reload, force-cache, only-if-cached
            credentials: "same-origin",
            // include, *same-origin, omit
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            redirect: "follow",
            // manual, *follow, error
            referrerPolicy: "no-referrer",
            // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
            body: new URLSearchParams(data).toString() // body data type must match "Content-Type" header
          });
        case 3:
          response = _context2.sent;
          return _context2.abrupt("return", response.json());
        case 5:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _searchConditions.apply(this, arguments);
}
function updateConditionsHint(conditions) {
  var select = $('.select-condition'),
    options = $('.select-condition .form-options');
  conditions = conditions.data;
  $('.select-condition .option:not(:last)').remove();
  options.prepend(conditions);
  select.addClass('open');
}
function unlockConsentFields() {
  var consent_firstname = document.querySelector('[name=consent_firstname]'),
    consent_lastname = document.querySelector('[name=consent_lastname]'),
    informed__consent = $('.informed__consent');
  consent_firstname.removeAttribute('readonly');
  consent_lastname.removeAttribute('readonly');
  informed__consent.removeClass('error');
}
function unlockConsentAgree(currentInput, validateResult) {
  var consent_firstname = document.querySelector('[name=consent_firstname]'),
    consent_lastname = document.querySelector('[name=consent_lastname]'),
    checkbox = document.querySelector('[name=agree-info]');
  if (currentInput.name !== "consent_firstname" && currentInput.name !== "consent_lastname") {
    return;
  }
  if (validateResult) {
    checkbox.removeAttribute('disabled');
  } else {
    checkbox.setAttribute('disabled', '');
    checkbox.checked = false;
  }
}
$(document).on('click', '[name=consent_firstname], [name=consent_lastname]', function (e) {
  var informed__consent = $('.informed__consent');
  if ($(this).is('[readonly]')) {
    informed__consent.addClass('error');
  }
});
$(document).on('click', '.download-consent-information', function (e) {
  e.preventDefault();
  var data = {
    'action': 'generate_consent_pdf'
  };
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: data,
    xhrFields: {
      responseType: 'blob'
    },
    dataType: 'binary',
    success: function success(file) {
      var fileURL = URL.createObjectURL(file),
        link = document.createElement('a');
      link.href = fileURL;
      link.download = 'consent_form.pdf';
      link.click();
    },
    error: function error() {
      console.log('Error');
    }
  });
});
function editHealthInformationForm() {
  var form = document.querySelector('.js-edit-health-information');
  if (!form) return;
  form.addEventListener('keyup', function (e) {
    validateInput(e.target);
  });
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    e.stopPropagation();
    var formInputs = e.currentTarget.querySelectorAll('input[required]'),
      validate = true;
    for (var k = 0; k < formInputs.length; k++) {
      if (!validateInput(formInputs[k])) {
        validate = false;
      }
    }
    if (validate) {
      submitHealthInformationForm();
    }
  });
}
function submitHealthInformationForm() {
  var form = $('.js-edit-health-information');
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        $('.health-information').html(response.data.html);
        noticeMessage(response.data.message);
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
}
$(document).on('click', '.choice-delete', function (e) {
  e.preventDefault();
  var btn = $(this),
    choice = btn.closest('.choice'),
    wrapper = btn.closest('.hint'),
    select = wrapper.find('.hint-select'),
    input = select.find('input'),
    choices = btn.parents('.choices');
  choice.remove();
  if (choices.has('div').length === 0) {
    input.prop('required', true);
  }
});
$(document).on('click', '.choice-add', function (e) {
  e.preventDefault();
  var btn = $(this),
    wrapper = btn.closest('.hint'),
    select = wrapper.find('.hint-select'),
    choices = wrapper.find('.choices'),
    input = select.find('input'),
    selectName = wrapper.data('name'),
    choice = '';
  if (input.val().length === 0) {
    return;
  }
  choice = '<div class="choice">' + '<div class="choice-row">' + '<div class="choice-name">' + input.val() + '</div>' + '<div class="choice-delete"></div>' + '<input type="hidden" name="' + selectName + '" value="' + input.val() + '">' + '</div>' + '</div>';
  wrapper.removeClass('open');
  choices.append(choice);
  input.val('');
  input.prop('required', false);
});
$(document).on('click', '.change-phone', function (e) {
  e.preventDefault();
  $('.account-content__edit-btn').removeClass('active');
  $('.personal-information').addClass('hide');
  $('[data-step=1]').toggleClass('active');
});
$(document).on('click', '.close_edit_phone', function (e) {
  e.preventDefault();
  $('.account-content__edit-btn').addClass('active');
  $('.personal-information').removeClass('hide');
  $('.form__step').removeClass('active');
});
$(document).on('click', '.account-content__edit-btn', function (e) {
  e.preventDefault();
  $(this).removeClass('active');
  $('.account-content__close-btn').addClass('active');
});
$(document).on('click', '.account-content__close-btn', function (e) {
  e.preventDefault();
  $(this).removeClass('active');
  $('.account-content__edit-btn').addClass('active');
});
$(document).on('submit', '.js-change-phone', function (e) {
  e.preventDefault();
  var form = $(this);
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        $('.personal-information').removeClass('hide');
        form.find('.form__step').removeClass('active');
        noticeMessage(response.data);
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
});
$(document).on('submit', '.js-edit-personal-info', function (e) {
  e.preventDefault();
  var form = $(this);
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: form.serializeArray(),
    success: function success(response) {
      if (response.success === true) {
        $('.personal-information').html(response.data.html);
        noticeMessage(response.data.message);
      } else {
        errorMessage(response.data);
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
});
$(document).on('click', '.js-form-cancel', function (e) {
  e.preventDefault();
  var btn = $(this),
    data = {
      action: btn.data('action'),
      name: btn.data('name')
    };
  $.ajax({
    type: 'POST',
    url: '/wp-admin/admin-ajax.php',
    data: data,
    success: function success(response) {
      if (response.success === true) {
        btn.parents('form').html(response.data);
        //noticeMessage(response.data)
      } else {
        //errorMessage(response.data)
      }
    },
    error: function error() {
      console.log('Error');
    }
  });
});
/******/ })()
;